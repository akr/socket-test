/* errsym.c is generated from errsym.erb. */

/*
 * Copyright (C) 2013 Tanaka Akira  <akr@fsij.org>
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *  1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 */

<%
  integer_const_list = <<End
AF_UNSPEC
PF_UNSPEC
AF_UNIX
PF_UNIX
AF_INET
PF_INET
AF_INET6
PF_INET6
SOCK_STREAM
SOCK_DGRAM
SOCK_SEQPACKET
SOMAXCONN
NAME_MAX
PATH_MAX
SYMLOOP_MAX
EXIT_SUCCESS
EXIT_FAILURE
CHAR_BIT
SCHAR_MIN
SCHAR_MAX
UCHAR_MAX
CHAR_MIN
CHAR_MAX
MB_LEN_MAX
SHRT_MIN
SHRT_MAX
USHRT_MAX
INT_MIN
INT_MAX
UINT_MAX
LONG_MIN
LONG_MAX
ULONG_MAX
LLONG_MIN
LLONG_MAX
ULLONG_MAX
FLT_RADIX
FLT_MANT_DIG
DBL_MANT_DIG
LDBL_MANT_DIG
DECIMAL_DIG
FLT_DIG
DBL_DIG
LDBL_DIG
FLT_MIN_EXP
DBL_MIN_EXP
LDBL_MIN_EXP
FLT_MIN_10_EXP
DBL_MIN_10_EXP
LDBL_MIN_10_EXP
FLT_MAX_EXP
DBL_MAX_EXP
LDBL_MAX_EXP
FLT_MAX_10_EXP
DBL_MAX_10_EXP
LDBL_MAX_10_EXP
End

  float_const_list = <<End
FLT_MAX
DBL_MAX
LDBL_MAX
FLT_EPSILON
DBL_EPSILON
LDBL_EPSILON
FLT_MIN
DBL_MIN
LDBL_MIN
End

%>

#include "sockettest.h"

#ifdef PRIuMAX
#  define SHOW_POSITIVE_INTEGER(name, num) \
     printf("%s = %"PRIuMAX" (%d bytes)\n", name, (uintmax_t)num, (int)sizeof(num))
#else
#  define SHOW_POSITIVE_INTEGER(name, num) \
     printf("%s = %lu (%d bytes)\n", name, (unsigned long)num, (int)sizeof(num))
#endif

#ifdef PRIdMAX
#  define SHOW_NEGATIVE_INTEGER(name, num) \
     printf("%s = %"PRIdMAX" (%d bytes)\n", name, (intmax_t)num, (int)sizeof(num))
#else
#  define SHOW_POSITIVE_INTEGER(name, num) \
     printf("%s = %ld (%d bytes)\n", name, (long)num, (int)sizeof(num))
#endif

int main(int argc, char *argv[])
{
% integer_const_list.each_line {|sym| sym.chomp!
#ifdef <%= sym %>
  if (0 <= <%= sym %>)
    SHOW_POSITIVE_INTEGER("<%= sym %>", <%= sym %>);
  else
    SHOW_NEGATIVE_INTEGER("<%= sym %>", <%= sym %>);
#endif
% }

% float_const_list.each_line {|sym| sym.chomp!
#ifdef <%= sym %>
  if (sizeof(<%= sym %>) == sizeof(long double))
    printf("%s = %.*Lg (%d bytes)\n", "<%= sym %>", LDBL_DIG, (long double)<%= sym %>, (int)sizeof(<%= sym %>));
  else if (sizeof(<%= sym %>) == sizeof(double))
    printf("%s = %.*g (%d bytes)\n", "<%= sym %>", DBL_DIG, (double)<%= sym %>, (int)sizeof(<%= sym %>));
  else if (sizeof(<%= sym %>) == sizeof(float))
    printf("%s = %.*g (%d bytes)\n", "<%= sym %>", FLT_DIG, (double)<%= sym %>, (int)sizeof(<%= sym %>));
  else
    printf("%s = %.*g (%d bytes)\n", "<%= sym %>", DBL_DIG, (double)<%= sym %>, (int)sizeof(<%= sym %>));
#endif
% }

  return EXIT_SUCCESS;
}

