/* genutil.c is generated from genutil.erb. */

/*
 * Copyright (C) 2013 Tanaka Akira  <akr@fsij.org>
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *  1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 */

<%
  errno_list = read_errno_list
%>

#include "sockettest.h"

char *errsym(int err)
{
% errno_list.each {|sym|
#ifdef <%= sym %>
  if (err == <%= sym %>) { return "<%= sym %>"; } else
#endif
% }
  return NULL;
}

static int intcmp(const void *vp1, const void *vp2)
{
  const int *ip1 =vp1;
  const int *ip2 =vp2;
  if (*ip1 < *ip2)
    return -1;
  if (*ip1 > *ip2)
    return 1;
  return 0;
}

void errno_candidate_each(void (*func)(int errcand, void *arg), void *arg)
{
  static int sorted = 0;
  static int errno_ary[] = {
% errno_list.each {|sym|
#ifdef <%= sym %>
    <%= sym %>,
#endif
% }
  };

  int guess_lo, guess_hi;
  int i;
  int first;
  int errcand;

  if (!sorted) {
    qsort(errno_ary, sizeof(errno_ary)/sizeof(int), sizeof(int), intcmp);
    sorted = 1;
  }

  first = 1;
  errcand = 0;
  for (i = 0; i < sizeof(errno_ary)/sizeof(int); i++) {
    guess_lo = errno_ary[i] < INT_MIN+100 ? INT_MIN : errno_ary[i]-100;
    guess_hi = INT_MAX-100 < errno_ary[i] ? INT_MAX : errno_ary[i]+100;

    if (first) {
      errcand = guess_lo;
      first = 0;
    }
    else {
      if (errcand < guess_lo)
        errcand = guess_lo;
    }
    while (errcand <= guess_hi) {
      if (errcand != 0)
        func(errcand, arg);
      errcand++;
    }
  }
}
