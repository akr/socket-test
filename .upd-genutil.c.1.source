/* genutil.c is generated from genutil.erb. */

/*
 * Copyright (C) 2013 Tanaka Akira  <akr@fsij.org>
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *  1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 */

<%
  errno_list = read_errno_list
%>

#include "sockettest.h"

const string_integer_pair_t internal_errno_to_name[] = {
% errno_list.each {|sym|
#ifdef <%= sym %>
  { "<%= sym %>", <%= sym %> },
#endif
% }
  { NULL, 0 }
};

const int num_errno = sizeof(internal_errno_to_name) / sizeof(*internal_errno_to_name) - 1;

<%
  constants = %w[
    AF_INET AF_INET6 AF_UNIX AF_UNSPEC
    SOCK_DGRAM SOCK_RAW SOCK_SEQPACKET SOCK_STREAM
    SHUT_RD SHUT_RDWR SHUT_WR
    MSG_CTRUNC MSG_DONTROUTE MSG_EOR MSG_OOB
    MSG_NOSIGNAL MSG_PEEK MSG_TRUNC MSG_WAITALL
    SOL_SOCKET
    SO_ACCEPTCONN SO_BROADCAST SO_DEBUG SO_DONTROUTE SO_ERROR SO_KEEPALIVE
    SO_LINGER SO_OOBINLINE SO_RCVBUF SO_RCVLOWAT SO_RCVTIMEO SO_REUSEADDR
    SO_SNDBUF SO_SNDLOWAT SO_SNDTIMEO SO_TYPE
    SCM_RIGHTS
    SOMAXCONN
  ]
%>

const string_integer_pair_t internal_constant_val_to_name[] = {
% constants.each {|sym|
#ifdef <%= sym %>
  { "<%= sym %>", <%= sym %> },
#endif
% }
  { NULL, 0 }
};

const int num_constants = sizeof(internal_constant_val_to_name) / sizeof(*internal_constant_val_to_name) - 1;

void *constant_search_names(char *prefix, void *(*func)(char *name, int val, void *arg), void *arg)
{
  size_t prefixlen = strlen(prefix);
% constants.sort.each {|str|
#ifdef <%= str %>
  if (sizeof(<%= str %>) <= sizeof(int) && strncmp("<%= str %>", prefix, prefixlen) == 0) {
    void *ret = func("<%= str %>", <%= str %>, arg);
    if (ret)
      return ret;
  }
#endif
% }
  return NULL;
}
