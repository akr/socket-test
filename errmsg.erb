/* errmsg.c is generated from errsym.erb. */

/*
 * Copyright (C) 2013 Tanaka Akira  <akr@fsij.org>
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *  1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 */

<%
   errno_list = read_errno_list
%>

#include "sockettest.h"

int main(int argc, char *argv[])
{
  int err;
  char *str;
  int min, max, ret, i;

  (void)argc;
  (void)argv;

% errno_list.each {|sym|
#ifdef <%= sym %>
  err = <%= sym %>; str = "<%= sym %>";
  printf("%s = %s\n", str, strerror(err));
#endif
% }

  ret = errno_minmax(&min, &max);
  if (ret == 0) {
    for (i = min; i <= max; i++) {
      char *sym = errsym(i);
      char *msg;
      if (sym)
        continue;
      errno = 0;
      msg = strerror(i);
      if (msg && !errno) {
        /*
         * strerror() return value for unknown error:
         * - GNU/Linux: "Unknown error NNN"
         * - NetBSD: "Unknown error: NNN"
         * - Minix: "Undefined error: NNN"
         * - Haiku:
         *   "Unknown General Error (-NNNNNNNNNN)"
         *   "Unknown OS Error (-NNNNNNNNNN)"
         *   "Unknown MIME type"
         *   "Unknown Application Kit Error (-NNNNNNNNNN)"
         *   "Unknown Interface Kit Error (-NNNNNNNNNN)"
         *   "Unknown Media Kit Error (-NNNNNNNNNN)"
         *   "Unknown Translation Kit Error (-NNNNNNNNNN)"
         *   "Unknown Midi Kit Error (-NNNNNNNNNN)"
         *   "Unknown Storage Kit Error (-NNNNNNNNNN)"
         *   "Unknown POSIX Error (-NNNNNNNNNN)"
         */
#define START_WITH(prefix) (strncmp(msg, (prefix), sizeof(prefix)-1) == 0)
        if (START_WITH("Unknown ") ||
            START_WITH("Undefined "))
          continue;
#undef START_WITH
        printf("%d = %s\n", i, msg);
      }
    }
  }

  return EXIT_SUCCESS;
}
