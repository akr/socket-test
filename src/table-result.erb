<%

# Copyright (C) 2013 Tanaka Akira  <akr@fsij.org>
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#  1. Redistributions of source code must retain the above copyright notice, this
#     list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#  3. The name of the author may not be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.

require 'pp'
include ERB::Util # for ERB::Util#h and ERB::Util#u
require 'tsort'

STDOUT.sync = true

os_list = %w[
  freebsd
  debian-kfreebsd
  darwin
  dragonfly
  netbsd
  openbsd51
  openbsd52
  miros
  hurd
  haiku
  minix
  linux
  linux-arm
  sunos
  cygwin
]

def shared_prefix_length(str1, str2)
  (0..str1.length).find {|i| str1[i] != str2[i] } || str1.length
end

class Graph
  include TSort
  def initialize
    @child_parents = {}
    @node_order = nil
  end
  attr_accessor :node_order
  def []=(child, parents)
    @child_parents[child] = parents
  end
  def [](child)
    @child_parents[child]
  end
  def tsort_each_node(&b)
    if @node_order
      h = @child_parents.dup
      @node_order.each {|n|
        yield n
        h.delete n
      }
      h.each_key(&b)
    else
      @child_parents.each_key(&b)
    end
  end
  def init_node_order(node_order)
    return if @node_order
    @node_order = node_order
  end
  def tsort_each_child(child, &b)
    # child-parent relation is reversed between tsort.rb and this class.
    if @child_parents.has_key? child
      @child_parents[child].each(&b)
    end
  end

  # returns a hash which maps node to its number of ancestors, including itself.
  # Note that the graph is not tree, shared ancestors are counted multiply.
  def count_ancestors
    count = Hash.new
    tsort_each {|n|
      num_ancestors = 1
      @child_parents[n].uniq.each {|parent|
        num_ancestors += count[parent]
      }
      count[n] = num_ancestors
    }
    count
  end

  def reverse
    result = Graph.new
    @child_parents.each {|child, parents|
      result[child] ||= []
      parents.each {|parent|
        result[parent] ||= []
        result[parent] << child
      }
    }
    result
  end
end

def merge_ordered(*arys)
  g = Graph.new
  arys.each {|ary|
    h = Hash.new(0)
    ary2 = ary.map {|e|
      h[e] += 1
      if h[e] == 1
        e
      else
        "#{e}(#{h[e]})"
      end
    }
    1.upto(ary2.length-1) {|i|
      e1 = ary2[i-1]
      e2 = ary2[i]
      (g[e2] ||= []) << e1
    }
    g[ary[0]] ||= []
  }
  ancestors = g.count_ancestors
  descendants = g.reverse.count_ancestors
  node_order = ancestors.keys.sort_by {|n|
    w = ancestors[n] * 2
    w += descendants[n]
    #puts "#{w} #{n}"
    w
  }
  g.init_node_order node_order
  merged = []
  g.tsort_each {|e|
    merged << e
  }
  merged
end

class DB
  include Enumerable

  def initialize
    @recs = []
  end

  def <<(rec)
    @recs << rec
  end

  def concat(recs)
    @recs.concat recs
    self
  end

  def each(&b)
    @recs.each(&b)
    nil
  end

  def map(&b)
    @recs.map(&b)
  end

  def mapdb(&b)
    DB.new.concat map(&b)
  end

  def group_each(*keys)
    h = {}
    @recs.each {|rec|
      k = rec.values_at(*keys)
      h[k] ||= []
      h[k] << rec
    }
    h.each {|k, recs|
      yield(*k, recs)
    }
    nil
  end

  def group_map(*keys)
    result = []
    group_each(*keys) {|*vals, recs|
      common = {}
      keys.each_with_index {|k, i|
        common[k] = vals[i]
      }
      result << yield(*vals, recs)
    }
    result
  end

  def group_mapdb(*keys, &b)
    DB.new.concat group_map(*keys, &b)
  end

end

files = {}
Dir.glob('results/*.txt') {|filename|
  os = File.basename(filename, '.txt')
  files[os] = File.read(filename)
}

os_list.reject! {|os|
  !files.has_key?(os)
}

os_order = {}
os_list.each_with_index {|os, i|
  os_order[os] = i
}

files.keys.sort.reverse.each_with_index {|os, i|
  unless os_order.has_key? os
    os_order[os] = -i
    os_list.unshift os
  end
}

os_command_numbered_lines = {}

def filter_command_lines(lines)
  addr_hash = {}
  port_hash = {}
  lines2 = []
  lines.each {|line|
    lines2 << line.gsub(/(\d+\.\d+\.\d+\.\d+):(\d+)/) {
      if $1 == '0.0.0.0' || $1 == '127.0.0.1'
        ip = $1
      elsif addr_hash.has_key?($1)
        ip = addr_hash[$1]
      else
        ip = addr_hash[$1] = "IPv4Addr#{addr_hash.size+1}"
      end
      if $2 == '0'
        port = '0'
      elsif port_hash.has_key?($2)
        port = port_hash[$2]
      else
        port = port_hash[$2] = "Port#{port_hash.size+1}"
      end
      "#{ip}:#{port}"
    }
  }
  lines2
end

files.each {|os, content|
  current_linenum = 0
  content.lines.slice_before(/\A(uname|\.\/)/).each {|lines|
    lines = filter_command_lines(lines)
    numbered_lines = lines.map {|line|
      current_linenum += 1
      [current_linenum, line]
    }
    numbered_lines.reject! {|linenum, line| /\A\s*\z/ =~ line }
    next if numbered_lines.empty?
    command_linenum, command = numbered_lines.shift
    command = command.chomp.rstrip.sub(%r{\A\./build/}, '')
    os_command_numbered_lines[os] ||= {}
    os_command_numbered_lines[os][command] ||= numbered_lines # some test command is invoked multiple times.
  }
}

uname_db = DB.new
command_db = DB.new

os_command_numbered_lines.each {|os, command_numbered_lines|
  command_numbered_lines.each {|command, numbered_lines|
    if /\Auname / =~ command
      uname_db << { :os => os, :command => command, :numbered_lines => numbered_lines }
    else
      command_db << { :os => os, :command => command, :numbered_lines => numbered_lines }
    end
  }
}

os_commands = {}
command_db.group_each(:os) {|os, recs|
  commands = recs.map {|rec|
    command = rec[:command]
    numbered_lines = rec[:numbered_lines]
    first_linenum, first_line = numbered_lines.first
    [first_linenum, command]
  }.sort.map {|linenum, command|
    command
  }
  os_commands[os] = commands
}
#pp os_commands.values
COMMAND_LIST = merge_ordered(*os_commands.values)
#pp COMMAND_LIST

command_db2 = DB.new
command_db.each {|rec|
  rec[:numbered_lines].each {|linenum, line|
    rec2 = rec.merge({:linenum=>linenum, :line=>line})
    rec2.delete :numbered_lines
    command_db2 << rec2
  }
}
#pp command_db2
command_db = command_db2

command_db2 = DB.new
command_db.each {|rec|
  line = rec[:line]
  unless /:|=|->|<-/ =~ line
    warn "unexpected line: #{line.inspect}"
    next
  end
  action, sep, result = $`, $&, $'
  action = action.strip
  result = result.strip
  command_db2 << rec.update({:action => action, :sep => sep, :result => result })
}
#pp command_db2
command_db = command_db2

command_db.group_each(:command) {|command, recs|
  seps = recs.map {|rec| rec[:sep] }.uniq
  if seps == [':'] || seps == ['=']
    recs.each {|rec| rec[:sep] = '' }
  end
}
#pp command_db

command_db.each {|rec|
  if rec[:sep] == ':'
    #pp rec
    rec[:sep] = '->'
  end
}

command_actions = {}
command_db.group_each(:command) {|command, recs|
  os_linenum_action_pairs = {}
  recs.each {|rec|
    os = rec[:os]
    linenum = rec[:linenum]
    action = rec[:action]
    os_linenum_action_pairs[os] ||= []
    os_linenum_action_pairs[os] << [linenum, action]
  }
  os_actions = {}
  os_linenum_action_pairs.each {|os, linenum_action_pairs|
    os_actions[os] = linenum_action_pairs.sort.map {|linenum, action| action }.uniq
  }
  #pp os_actions.values
  command_actions[command] = merge_ordered(*os_actions.values)
}
#pp command_actions

command_action_order = {}
command_actions.each {|command, actions|
  command_action_order[command] ||= {}
  actions.each_with_index {|action, i|
    command_action_order[command][action] = i
  }
}
#pp command_action_order

command_action_seps = {}
command_db.group_each(:command, :action) {|command, action, recs|
  os_linenum_sep_pairs = {}
  recs.map {|rec|
    os = rec[:os]
    linenum = rec[:linenum]
    sep = rec[:sep]
    os_linenum_sep_pairs[os] ||= []
    os_linenum_sep_pairs[os] << [linenum, sep]
  }
  os_action_seps = {}
  os_linenum_sep_pairs.each {|os, linenum_sep_pairs|
    os_action_seps[os] = linenum_sep_pairs.sort.map {|linenum, sep| sep }.uniq
  }
  command_action_seps[command] ||= {}
  command_action_seps[command][action] = merge_ordered(*os_action_seps.values)
}
#pp command_action_seps

command_action_sep_order = {}
command_action_seps.each {|command, actions_seps|
  command_action_sep_order[command] ||= {}
  actions_seps.each {|action, seps|
    command_action_sep_order[command][action] ||= {}
    seps.each_with_index {|sep, i|
      command_action_sep_order[command][action][sep] = i
    }
  }
}
#pp command_action_sep_order

# substitute /temp.06477/ to /temp.N/
command_db.each {|rec|
  rec[:result].gsub!(%r{/temp.\d+/}, '/temp.N/')
}
#pp command_db

# remove results people can interpolate.
#
# ...
# ./build/unix-stream '(44*"./")a\0'
# ./build/unix-stream '(44*"./")ab\0'
# ./build/unix-stream '(45*"./")a\0'
# ...

def shell_split_commandline(commandline)
  args = commandline.split(/\s+/)
  args.map! {|arg| /\A'(.*)'\z/ =~ arg ? $1 : arg }
  args
end

def socket_test_expand_repeatation(str)
  str.gsub(/\((\d+)\*"(.*?)"\)/) { $2 * $1.to_i }
end

def generate_nulloverwrite_substs(command1_args, command2_args, command3_args)
  command1_lens = command1_args.map {|arg| arg.length }
  command2_lens = command2_args.map {|arg| arg.length }
  command3_lens = command3_args.map {|arg| arg.length }

  nulloverwrite_subst_12 = command1_args.map.with_index {|arg, i|
    if command1_lens[i] < command2_lens[i]
      [Regexp.union(arg + '\\0' * (command2_lens[i] - command1_lens[i])), command2_args[i]]
    else
      [Regexp.union(arg), command2_args[i] + '\\0' * (command1_lens[i] - command2_lens[i])]
    end
  }
  nulloverwrite_subst_23 = command2_args.map.with_index {|arg, i|
    if command2_lens[i] < command3_lens[i]
      [Regexp.union(arg + '\\0' * (command3_lens[i] - command2_lens[i])), command3_args[i]]
    else
      [Regexp.union(arg), command3_args[i] + '\\0' * (command2_lens[i] - command3_lens[i])]
    end
  }
  return nulloverwrite_subst_12, nulloverwrite_subst_23
end

def interpolatable_result?(command1, keysep_os_result1, command2, keysep_os_result2, command3, keysep_os_result3)
  #p [:command1, command1]
  #p [:command2, command2]
  #p [:command3, command3]
  command1_ary = shell_split_commandline(command1)
  command2_ary = shell_split_commandline(command2)
  command3_ary = shell_split_commandline(command3)
  if command1_ary.empty? ||
     command1_ary.length != command2_ary.length || 
     command1_ary.length != command3_ary.length || 
     command1_ary[0] != command2_ary[0] ||
     command1_ary[0] != command3_ary[0]
    #p [__LINE__, :command_length]
    return false
  end
  command = command1_ary.shift
  command2_ary.shift
  command3_ary.shift
  command1_opts, command1_args = command1_ary.partition {|arg| /\A-/ =~ arg }
  command2_opts, command2_args = command2_ary.partition {|arg| /\A-/ =~ arg }
  command3_opts, command3_args = command3_ary.partition {|arg| /\A-/ =~ arg }
  if command1_opts != command2_opts || command2_opts != command3_opts ||
     command1_args.length != command2_args.length || command1_args.length != command3_args.length
    #p [__LINE__, :command_args]
    return false
  end
  command1_args.map! {|arg| socket_test_expand_repeatation(arg) }
  command2_args.map! {|arg| socket_test_expand_repeatation(arg) }
  command3_args.map! {|arg| socket_test_expand_repeatation(arg) }
  (command1_args.length-1).downto(0) {|i|
    if command1_args[i] == command2_args[i] && command2_args[i] == command3_args[i]
      command1_args.delete_at(i)
      command2_args.delete_at(i)
      command3_args.delete_at(i)
    elsif command1_args[i] == command2_args[i] || command2_args[i] == command3_args[i]
      #p [__LINE__, :command_args2]
      return false
    end
  }

  simple_subst_12 = command1_args.map.with_index {|arg, i| [Regexp.union(arg), command2_args[i]] }
  simple_subst_23 = command2_args.map.with_index {|arg, i| [Regexp.union(arg), command3_args[i]] }

  nulloverwrite_subst_12, nulloverwrite_subst_23 = generate_nulloverwrite_substs(command1_args, command2_args, command3_args)

  command1_unredundant_args = command1_args.map {|arg| arg.sub(%r{\A(\./)*}, '') }
  command2_unredundant_args = command2_args.map {|arg| arg.sub(%r{\A(\./)*}, '') }
  command3_unredundant_args = command3_args.map {|arg| arg.sub(%r{\A(\./)*}, '') }
  nulloverwrite_unredandant_subst_12, nulloverwrite_unredandant_subst_23 =
    generate_nulloverwrite_substs(command1_unredundant_args, command2_unredundant_args, command3_unredundant_args)

  if keysep_os_result1.keys.sort != keysep_os_result2.keys.sort ||
     keysep_os_result1.keys.sort != keysep_os_result3.keys.sort
    #p [__LINE__, :not_interpolatable, :keysep_os]
    return false
  end
  keysep_os_result1.each {|keysep, os_result1|
    os_result2 = keysep_os_result2[keysep]
    os_result3 = keysep_os_result3[keysep]
    if os_result1.keys.sort != os_result2.keys.sort ||
       os_result1.keys.sort != os_result3.keys.sort
      #p [__LINE__, :not_interpolatable, :keysep, keysep]
      return false
    end
    os_result1.each {|os, result1|
      result2 = os_result2[os]
      result3 = os_result3[os]
      next if result1 == result2 && result2 == result3
      if /unix/ =~ command &&
        (m1 = /\A(\d+\.\d+\.\d+\.\d+):(\d+) \((\d+) bytes\)\z/.match(result1)) &&
        (m2 = /\A(\d+\.\d+\.\d+\.\d+):(\d+) \((\d+) bytes\)\z/.match(result2)) &&
        (m3 = /\A(\d+\.\d+\.\d+\.\d+):(\d+) \((\d+) bytes\)\z/.match(result3)) &&
        m1[1] == m2[1] && m2[1] == m3[1] &&
        m1[2] != m2[2] && m2[2] != m3[2] && m3[2] != m1[2] &&
        m1[3] == m2[3] && m2[3] == m3[3]
        # Cygwin can return AF_INET sockaddr for AF_UNIX socket operations.
        next
      end
      if !((m1 = /\A"(.*)" \((\d+) bytes\)\z/.match(result1)) &&
           (m2 = /\A"(.*)" \((\d+) bytes\)\z/.match(result2)) &&
           (m3 = /\A"(.*)" \((\d+) bytes\)\z/.match(result3))) &&
         !((m1 = /\A"(.*)"\.\.\. \((\d+) bytes\)\z/.match(result1)) &&
           (m2 = /\A"(.*)"\.\.\. \((\d+) bytes\)\z/.match(result2)) &&
           (m3 = /\A"(.*)"\.\.\. \((\d+) bytes\)\z/.match(result3)))
        #pp [__LINE__, keysep, os, result1, result2, result3]
        return false
      end
      socklen1 = m1[2].to_i
      socklen2 = m2[2].to_i
      socklen3 = m3[2].to_i
      if (socklen1 == socklen2) ^ (socklen2 == socklen3)
        #p [__LINE__, keysep, os]
        return false
      end
      expanded_sockaddr1 = socket_test_expand_repeatation(m1[1])
      expanded_sockaddr2 = socket_test_expand_repeatation(m2[1])
      expanded_sockaddr3 = socket_test_expand_repeatation(m3[1])
      if (0...simple_subst_12.length).any? {|i|
           pat12, repl12 = simple_subst_12[i]
           pat23, repl23 = simple_subst_23[i]
           expanded_sockaddr1.gsub(pat12) { repl12 } == expanded_sockaddr2 &&
           expanded_sockaddr2.gsub(pat23) { repl23 } == expanded_sockaddr3
         }
        next
      end
      if nulloverwrite_subst_12 && nulloverwrite_subst_23 &&
         (0...nulloverwrite_subst_12.length).any? {|i|
           pat12, repl12 = nulloverwrite_subst_12[i]
           pat23, repl23 = nulloverwrite_subst_23[i]
           expanded_sockaddr1.gsub(pat12) { repl12 } == expanded_sockaddr2 &&
           expanded_sockaddr2.gsub(pat23) { repl23 } == expanded_sockaddr3
         }
        next
      end
      if nulloverwrite_unredandant_subst_12 && nulloverwrite_unredandant_subst_23 &&
         (0...nulloverwrite_unredandant_subst_12.length).any? {|i|
           pat12, repl12 = nulloverwrite_unredandant_subst_12[i]
           pat23, repl23 = nulloverwrite_unredandant_subst_23[i]
           expanded_sockaddr1.gsub(pat12) { repl12 } == expanded_sockaddr2 &&
           expanded_sockaddr2.gsub(pat23) { repl23 } == expanded_sockaddr3
         }
        next
      end
      if /haiku/ =~ os &&
         /\A(\(sun_len=8\))?\\0[0-9a-f]{5}\z/ =~ expanded_sockaddr1 &&
         /\A(\(sun_len=8\))?\\0[0-9a-f]{5}\z/ =~ expanded_sockaddr2 &&
         /\A(\(sun_len=8\))?\\0[0-9a-f]{5}\z/ =~ expanded_sockaddr3
        #p [expanded_sockaddr1, expanded_sockaddr2, expanded_sockaddr3]
        next
      end
      #pp [__LINE__, keysep, os, command1, command2, command3, 
      #    command1_args, command2_args, command3_args,
      #    result1, result2, result3,
      #    expanded_sockaddr1, expanded_sockaddr2, expanded_sockaddr3]
      return false
    }
  }
  true
end

#def remove_interpolatable_commands(command_keysep_os_result)
def remove_interpolatable_commands(command_db)
  command_actionsep_os_result = {}
  command_db.group_each(:os, :command, :action, :sep) {|os, command, action, sep, recs|
    if recs.length != 1
      raise "ambiguous (os,command,action,sep): (#{os.inspect}, #{command.inspect}, #{action.inspect}, #{sep.inspect})"
    end
    rec = recs[0]
    result = rec[:result]
    actionsep = [action, sep]
    command_actionsep_os_result[command] ||= {}
    command_actionsep_os_result[command][actionsep] ||= {}
    command_actionsep_os_result[command][actionsep][os] = result
  }

  command_actionsep_os_result_ary = COMMAND_LIST.map {|command| [command, command_actionsep_os_result[command]] }

  command_keysep_os_result_ary = command_actionsep_os_result_ary
  command_keysep_os_result2 = {}
  command_keysep_os_result_ary.each_with_index {|(command, keysep_os_result), i|
    if i == 0 || i == command_keysep_os_result_ary.length - 1
      command_keysep_os_result2[command] = keysep_os_result
    else
      above_command, above_keysep_os_result = command_keysep_os_result_ary[i-1]
      below_command, below_keysep_os_result = command_keysep_os_result_ary[i+1]
      #next if command != "./unix-dgram '(91*\"c\")\\0'  '(91*\"c\")\\0'  'bar\\0'" # for debug
      #next if command != "./unix-dgram -4 '(sun_len=2)abc\\0' '(sun_len=2)abc\\0' 'bar\\0'" # for debug
      if !interpolatable_result?(above_command, above_keysep_os_result,
                                 command, keysep_os_result,
                                 below_command, below_keysep_os_result)
        command_keysep_os_result2[command] = keysep_os_result
        #puts "not interpolatable: #{command.inspect}" # for debug
      else
        #puts "interpolatable: #{command.inspect}" # for debug
      end
      #exit # for debug
    end
  }
  command_keysep_os_result2

  command_db2 = DB.new
  command_keysep_os_result2.each {|command, actionsep_os_result|
    actionsep_os_result.each {|(action, sep), os_result|
      os_result.each {|os, result|
        command_db2 << {:command => command, :action => action, :sep => sep, :os => os, :result => result }
      }
    }
  }

  command_db2
end

command_db = remove_interpolatable_commands(command_db)
#pp command_db

commands = {}
command_db.group_each(:command) {|command, recs|
  commands[command] = true
}
COMMAND_LIST.reject! {|command| !commands[command] }
commands = nil

command_db.group_each(:command, :action, :sep) {|command, action, sep, recs|
  count = Hash.new(0)
  recs.each {|rec|
    count[rec[:result]] += 1
  }
  max = count.values.max
  maxcounts = count.to_a.reject {|result, n| n != max }
  normal_result = maxcounts.sort[0][0]
  recs.each {|rec|
    if rec[:result] == normal_result
      rec[:style] = "socket-normal"
    else
      rec[:style] = "socket-abnormal"
    end
  }
}

def command2fragment(command)
  command.gsub(%r{[^a-zA-Z0-9./-]}, "")
end

%>
<html>
  <head>
    <title>Unix domain socket behavior comparison</title>
    <style type="text/css">
      .socket-normal { background: white; }
      .socket-abnormal { background: #FA8072; }
      .socket-none { background: gray; }
      table {
        border: 1px;
        border-collapse:collapse;
      }
      th {
        background: black;
        color: white;
      }
    </style>
  </head>
<body>

<h1>Unix domain socket behavior comparison</h1>

% if uname_db
<h2><a name="uname">uname</a></h2>
<table border>
  <tr> <th align="left">OS</th> <th>uname</th> </tr>
%   uname_db.to_a.sort_by {|rec| os_order[rec[:os]] }.each {|rec|
%     uname = rec[:numbered_lines].map {|linenum, line| line }.join
  <tr> <th align="left"><%=h rec[:os] %></th> <td><%=h uname %></td> </tr>
%   }
</table>
% end

<h2>contents</h2>

<ul>
% COMMAND_LIST.each {|command|
%   frag = command2fragment(command)
  <li><a href="#<%= h(u(frag)) %>"><%=h command %></a></li>
% }
</ul>

% command_recs_hash = Hash[command_db.group_map(:command) {|command, recs| [command, recs] }]
% COMMAND_LIST.each {|command|
%   recs = command_recs_hash[command]
%   os_list = recs.map {|rec|
%     rec[:os]
%   }.uniq.sort_by {|os|
%     os_order[os]
%   }
%   action_sep_list = recs.map {|rec|
%     [rec[:action], rec[:sep]]
%   }.uniq.sort_by {|action, sep|
%     [command_action_order[command][action],
%      command_action_sep_order[command][action][sep]]
%   }
%   os_actionsep_result_style_pair = {}
%   recs.each {|rec|
%     os_actionsep_result_style_pair[rec[:os]] ||= {}
%     os_actionsep_result_style_pair[rec[:os]][[rec[:action], rec[:sep]]] ||= [rec[:result], rec[:style]]
%   }
%   frag = command2fragment(command)
<h2><a name="<%= h(u(frag)) %>"><%=h command %></a></h2>
<table border>
  <tr>
    <th align="right">OS</th>
% os_list.each {|os|
    <th><%=h os %></th>
% }
  </tr>
% action_sep_list.each {|action, sep|
  <tr>
%   action_sep = sep.empty? ? action : "#{action} #{sep}"
    <th align="left"><%=h action_sep %></th>
%   os_list.each {|os|
%     if os_actionsep_result_style_pair.has_key?(os) &&
%        os_actionsep_result_style_pair[os].has_key?([action, sep])
%     result, style = os_actionsep_result_style_pair[os][[action, sep]]
      <td class="<%=h style %>"><%=h result %></td>
%     else
      <td class="socket-none"></td>
%     end
%   }
  </tr>
% }
  </tr>
</table>
% }

<a href="https://github.com/akr/socket-test">generated by socket-test</a>
</body>
</html>
