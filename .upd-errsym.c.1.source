/* errsym.c is generated from errsym.erb. */

/*
 * Copyright (C) 2013 Tanaka Akira  <akr@fsij.org>
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *  1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 */

<%
  errno_list = read_errno_list
%>

#include "sockettest.h"

char *errsym(int err)
{
% errno_list.each {|sym|
#ifdef <%= sym %>
  if (err == <%= sym %>) { return "<%= sym %>"; } else
#endif
% }
  return NULL;
}

/* returns 0 on success, -1 on failure. */
int errno_minmax(int *minp, int *maxp)
{
  int min = 0, max = 0;
  int defined = 0;
#ifdef HAVE_SYS_NERR
  min = 1;
  max = sys_nerr - 1;
  defined = 1;
#endif

% errno_list.each {|sym|
#ifdef <%= sym %>
  if (<%= sym %> != 0) {
    if (!defined) {
      defined = 1;
      min = max = <%= sym %>;
    }
    else {
      if (<%= sym %> < min) min = <%= sym %>;
      if (max < <%= sym %>) max = <%= sym %>;
    }
  }
#endif
% }
  if (defined) {
    *minp = min;
    *maxp = max;
    return 0;
  }
  else {
    return -1;
  }
}

