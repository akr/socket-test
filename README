= socket test commands

== Home Page

  https://github.com/akr/socket-test

== Build

  % git clone git://github.com/akr/socket-test.git
  % cd socket-test
  % autoconf
  % ./configure CFLAGS='-g -Wall'     # -Wall assumes gcc.
  % make

== Example

Debian GNU/Linux 7.0 (wheezy) :

  linux% uname -mrsv
  Linux 3.2.0-4-amd64 #1 SMP Debian 3.2.35-2 x86_64
  linux% ./size
  sizeof(sockaddr)=16
    offsetof(sa_family)=0              sizeof(sa_family)=2
    offsetof(sa_data)=2                sizeof(sa_data)=14
  sizeof(sockaddr_un)=110
    offsetof(sun_family)=0             sizeof(sun_family)=2
    offsetof(sun_path)=2               sizeof(sun_path)=108
  sizeof(sockaddr_in)=16
    offsetof(sin_family)=0             sizeof(sin_family)=2
    offsetof(sin_port)=2               sizeof(sin_port)=2
    offsetof(sin_addr)=4               sizeof(sin_addr)=4
  sizeof(sockaddr_in6)=28
    offsetof(sin6_family)=0            sizeof(sin6_family)=2
    offsetof(sin6_port)=2              sizeof(sin6_port)=2
    offsetof(sin6_flowinfo)=4          sizeof(sin6_flowinfo)=4
    offsetof(sin6_addr)=8              sizeof(sin6_addr)=16
    offsetof(sin6_scope_id)=24         sizeof(sin6_scope_id)=4
  sizeof(sockaddr_storage)=128
    offsetof(ss_family)=0              sizeof(ss_family)=2
  linux% ./unix-connection 'foo' './foo'
  bind(server)          <- "foo" (3 bytes)
  getsockname(server)   -> "foo\0" (4 bytes)    # Linux complements a NUL.
  getsockname(client)   -> "" (0 bytes)         # sun_family only sockaddr_un for anonymous Unix domain socket.
  connect               <- "./foo" (5 bytes)
  getpeername(client)   -> "foo\0" (4 bytes)    # getpeername returns the name given for bind().
  accept                -> "" (0 bytes)
  getsockname(accepted) -> "foo\0" (4 bytes)
  getpeername(accepted) -> "" (0 bytes)
  linux% ./bind-getsockname 01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456
  bind        <- "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456" (107 bytes)
  getsockname -> "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456\0" (108 bytes)
  linux% ./bind-getsockname 012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
  bind        <- "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567" (108 bytes)
  getsockname -> "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567"... (109 bytes)
  linux% ./bind-getsockname 0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678
  bind        <- "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678" (109 bytes)
  bind: Invalid argument (EINVAL)
  linux% ./bind-getsockname /etc/hosts
  bind        <- "/etc/hosts" (10 bytes)
  bind: Address already in use (EADDRINUSE)
  linux% ./bind-getsockname /etc
  bind        <- "/etc" (4 bytes)
  bind: Address already in use (EADDRINUSE)
  linux% ./bind-getsockname /
  bind        <- "/" (1 bytes)
  bind: Address already in use (EADDRINUSE)     # EADDRINUSE for the root directory.
  linux% ./bind-getsockname /foo
  bind        <- "/foo" (4 bytes)
  bind: Permission denied (EACCES)
  linux% ./bind-getsockname ''
  bind        <- "" (0 bytes)
  getsockname -> "\00001b" (6 bytes)    # Linux "autobind" feature binds a socket to a fresh name in abstract name space.
  linux% ./bind-getsockname ''
  bind        <- "" (0 bytes)
  getsockname -> "\00001c" (6 bytes)    # Linux "autobind" feature
  linux% ./unix-connection '\0abc'      # Linux "abstract name space" begins with "\0"
  bind(server)          <- "\0abc" (4 bytes)
  getsockname(server)   -> "\0abc" (4 bytes)
  getsockname(client)   -> "" (0 bytes)
  connect               <- "\0abc" (4 bytes)
  getpeername(client)   -> "\0abc" (4 bytes)
  accept                -> "" (0 bytes)
  getsockname(accepted) -> "\0abc" (4 bytes)
  getpeername(accepted) -> "" (0 bytes)
  linux% ./unix-connection '\0abc' '\0abc\0'
  bind(server)          <- "\0abc" (4 bytes)
  getsockname(server)   -> "\0abc" (4 bytes)
  getsockname(client)   -> "" (0 bytes)
  connect               <- "\0abc\0" (5 bytes)
  connect: Connection refused (ECONNREFUSED)    # Linux "abstract name space" treats NUL as usual character.

FreeBSD 9.1 :

  freebsd% uname -mrsv
  FreeBSD 9.1-RELEASE FreeBSD 9.1-RELEASE #0 r243825: Tue Dec  4 09:23:10 UTC 2012     root@farrell.cse.buffalo.edu:/usr/obj/usr/src/sys/GENERIC  amd64
  freebsd% ./size
  sizeof(sockaddr)=16
    offsetof(sa_len)=0                 sizeof(sa_len)=1         # 4.4BSD has s*_len field.
    offsetof(sa_family)=1              sizeof(sa_family)=1
    offsetof(sa_data)=2                sizeof(sa_data)=14
  sizeof(sockaddr_un)=106
    offsetof(sun_len)=0                sizeof(sun_len)=1
    offsetof(sun_family)=1             sizeof(sun_family)=1
    offsetof(sun_path)=2               sizeof(sun_path)=104
  sizeof(sockaddr_in)=16
    offsetof(sin_len)=0                sizeof(sin_len)=1
    offsetof(sin_family)=1             sizeof(sin_family)=1
    offsetof(sin_port)=2               sizeof(sin_port)=2
    offsetof(sin_addr)=4               sizeof(sin_addr)=4
  sizeof(sockaddr_in6)=28
    offsetof(sin6_len)=0               sizeof(sin6_len)=1
    offsetof(sin6_family)=1            sizeof(sin6_family)=1
    offsetof(sin6_port)=2              sizeof(sin6_port)=2
    offsetof(sin6_flowinfo)=4          sizeof(sin6_flowinfo)=4
    offsetof(sin6_addr)=8              sizeof(sin6_addr)=16
    offsetof(sin6_scope_id)=24         sizeof(sin6_scope_id)=4
  sizeof(sockaddr_storage)=128
    offsetof(ss_len)=0                 sizeof(ss_len)=1
    offsetof(ss_family)=1              sizeof(ss_family)=1
  freebsd% ./unix-connection foo ./foo
  bind(server)          <- "foo" (3 bytes)
  getsockname(server)   -> "foo" (3 bytes)      # FreeBSD doesn't complement a NUL.
  getsockname(client)   -> "\0\0\0\0\0\0\0\0\0\0\0\0\0\0" (14 bytes)    # 14 NULs returned for anonymous Unix domain socket.
  connect               <- "./foo" (5 bytes)
  getpeername(client)   -> "foo" (3 bytes)      # getpeername returns the name given for bind().
  accept                -> "\0\0\0\0\0\0\0\0\0\0\0\0\0\0" (14 bytes)
  getsockname(accepted) -> "foo" (3 bytes)
  getpeername(accepted) -> "\0\0\0\0\0\0\0\0\0\0\0\0\0\0" (14 bytes)
  freebsd% ./bind-getsockname 0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012
  bind        <- "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012" (103 bytes)
  getsockname -> "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012" (103 bytes)
  freebsd% ./bind-getsockname 01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123
  bind        <- "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123" (104 bytes)
  getsockname -> "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123" (104 bytes)
  freebsd% ./bind-getsockname 012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234
  bind        <- "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234" (105 bytes)
  bind: Invalid argument
  freebsd% ./bind-getsockname /etc/hosts
  bind        <- "/etc/hosts" (10 bytes)
  bind: Address already in use (EADDRINUSE)
  freebsd% ./bind-getsockname /etc
  bind        <- "/etc" (4 bytes)
  bind: Address already in use (EADDRINUSE)
  freebsd% ./bind-getsockname /
  bind        <- "/" (1 bytes)
  bind: Is a directory (EISDIR)                 # EISDIR for the root directory.
  freebsd% ./bind-getsockname /foo
  bind        <- "/foo" (4 bytes)
  bind: Permission denied (EACCES)
  freebsd% ./bind-getsockname ''
  bind        <- "" (0 bytes)
  bind: Invalid argument (EINVAL)               # EINVAL for empty path.


NetBSD 5.1 :

  netbsd% uname -mrsv
  NetBSD 5.1 NetBSD 5.1 (GENERIC) #0: Sat Nov  6 13:19:33 UTC 2010  builds@b6.netbsd.org:/home/builds/ab/netbsd-5-1-RELEASE/amd64/201011061943Z-obj/home/builds/ab/netbsd-5-1-RELEASE/src/sys/arch/amd64/compile/GENERIC amd64
  netbsd% ./size
  sizeof(sockaddr)=16
    offsetof(sa_len)=0                 sizeof(sa_len)=1         # 4.4BSD has s*_len field.
    offsetof(sa_family)=1              sizeof(sa_family)=1
    offsetof(sa_data)=2                sizeof(sa_data)=14
  sizeof(sockaddr_un)=106
    offsetof(sun_len)=0                sizeof(sun_len)=1
    offsetof(sun_family)=1             sizeof(sun_family)=1
    offsetof(sun_path)=2               sizeof(sun_path)=104
  sizeof(sockaddr_in)=16
    offsetof(sin_len)=0                sizeof(sin_len)=1
    offsetof(sin_family)=1             sizeof(sin_family)=1
    offsetof(sin_port)=2               sizeof(sin_port)=2
    offsetof(sin_addr)=4               sizeof(sin_addr)=4
  sizeof(sockaddr_in6)=28
    offsetof(sin6_len)=0               sizeof(sin6_len)=1
    offsetof(sin6_family)=1            sizeof(sin6_family)=1
    offsetof(sin6_port)=2              sizeof(sin6_port)=2
    offsetof(sin6_flowinfo)=4          sizeof(sin6_flowinfo)=4
    offsetof(sin6_addr)=8              sizeof(sin6_addr)=16
    offsetof(sin6_scope_id)=24         sizeof(sin6_scope_id)=4
  sizeof(sockaddr_storage)=128
    offsetof(ss_len)=0                 sizeof(ss_len)=1
    offsetof(ss_family)=1              sizeof(ss_family)=1
  netbsd% ./unix-connection foo ./foo
  bind(server)          <- "foo" (3 bytes)
  getsockname(server)   -> "foo" (3 bytes)      # FreeBSD doesn't complement a NUL.
  getsockname(client)   -> "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0" (104 bytes)       # 104 NULs returned for anonymous Unix domain socket.
  connect               <- "./foo" (5 bytes)
  getpeername(client)   -> "foo" (3 bytes)      # getpeername returns the name given for bind().
  accept                -> "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0" (104 bytes)
  getsockname(accepted) -> "foo" (3 bytes)
  getpeername(accepted) -> "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0" (104 bytes)
  netbsd% ./bind-getsockname 0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012
  bind        <- "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012" (103 bytes)
  getsockname -> "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012" (103 bytes)
  netbsd% ./bind-getsockname 01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123
  bind        <- "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123" (104 bytes)
  getsockname -> "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123" (104 bytes)
  netbsd% ./bind-getsockname 012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234
  bind        <- "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234" (105 bytes)
  getsockname -> "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123" (104 bytes)
  netbsd% ./bind-getsockname 01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
  bind        <- "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789" (110 bytes)
  getsockname -> "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123" (104 bytes)
  netbsd% ./bind-getsockname /etc/hosts
  bind        <- "/etc/hosts" (10 bytes)
  bind: Address already in use (EADDRINUSE)
  netbsd% ./bind-getsockname /etc
  bind        <- "/etc" (4 bytes)
  bind: Address already in use (EADDRINUSE)
  netbsd% ./bind-getsockname /
  bind        <- "/" (1 bytes)
  bind: File exists (EEXIST)                    # EEXIST for the root directory.
  netbsd% ./bind-getsockname /foo
  bind        <- "/foo" (4 bytes)
  bind: Permission denied (EACCES)
  netbsd% ./bind-getsockname ''
  bind        <- "" (0 bytes)
  bind: No such file or directory (ENOENT)      # ENOENT for empty path.


OpenBSD 5.1 :

  openbsd% uname -mrsv
  OpenBSD 5.1 GENERIC#0 sparc64
  openbsd% ./size
  sizeof(sockaddr)=16
    offsetof(sa_len)=0                 sizeof(sa_len)=1         # 4.4BSD has s*_len field.
    offsetof(sa_family)=1              sizeof(sa_family)=1
    offsetof(sa_data)=2                sizeof(sa_data)=14
  sizeof(sockaddr_un)=106
    offsetof(sun_len)=0                sizeof(sun_len)=1
    offsetof(sun_family)=1             sizeof(sun_family)=1
    offsetof(sun_path)=2               sizeof(sun_path)=104
  sizeof(sockaddr_in)=16
    offsetof(sin_len)=0                sizeof(sin_len)=1
    offsetof(sin_family)=1             sizeof(sin_family)=1
    offsetof(sin_port)=2               sizeof(sin_port)=2
    offsetof(sin_addr)=4               sizeof(sin_addr)=4
  sizeof(sockaddr_in6)=28
    offsetof(sin6_len)=0               sizeof(sin6_len)=1
    offsetof(sin6_family)=1            sizeof(sin6_family)=1
    offsetof(sin6_port)=2              sizeof(sin6_port)=2
    offsetof(sin6_flowinfo)=4          sizeof(sin6_flowinfo)=4
    offsetof(sin6_addr)=8              sizeof(sin6_addr)=16
    offsetof(sin6_scope_id)=24         sizeof(sin6_scope_id)=4
  sizeof(sockaddr_storage)=256
    offsetof(ss_len)=0                 sizeof(ss_len)=1
    offsetof(ss_family)=1              sizeof(ss_family)=1
  openbsd% ./unix-connection foo ./foo
  bind(server)          <- "foo" (3 bytes)
  getsockname(server)   -> "foo" (3 bytes)      # OpenBSD doesn't complement a NUL.
  getsockname(client)   -> too short sockaddr_un (0 bytes)      # empty sockaddr_un (no sun_len and sun_family) returned by getsockname for anonymous Unix domain socket.
  connect               <- "./foo" (5 bytes)
  getpeername(client)   -> "foo" (3 bytes)      # getpeername returns the name given for bind().
  accept                -> "\0\0\0\0\0\0\0\0\0\0\0\0\0\0" (14 bytes)    # 14 NULs returned by accept for anonymous Unix domain socket.
  getsockname(accepted) -> "foo" (3 bytes)
  getpeername(accepted) -> too short sockaddr_un (0 bytes)      # empty sockaddr_un returned by getpeername for anonymous Unix domain socket.
  openbsd% ./bind-getsockname 0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012
  bind        <- "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012" (103 bytes)
  getsockname -> "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012" (103 bytes)
  openbsd% ./bind-getsockname 01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123
  bind        <- "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123" (104 bytes)
  bind: Invalid argument
  openbsd% ./bind-getsockname 012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234
  bind        <- "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234" (105 bytes)
  bind: Invalid argument
  openbsd% ./bind-getsockname /etc/hosts
  bind        <- "/etc/hosts" (10 bytes)
  bind: Address already in use (EADDRINUSE)
  openbsd% ./bind-getsockname /etc
  bind        <- "/etc" (4 bytes)
  bind: Address already in use (EADDRINUSE)
  openbsd% ./bind-getsockname /
  bind        <- "/" (1 bytes)
  bind: Is a directory (EISDIR)         # EISDIR for the root directory.
  openbsd% ./bind-getsockname /foo
  bind        <- "/foo" (4 bytes)
  bind: Permission denied (EACCES)
  openbsd% ./bind-getsockname ''
  bind        <- "" (0 bytes)
  bind: Invalid argument (EINVAL)       # EINVAL for empty path.


SunOS 5.11 :

  sunos% uname -mrsv
  SunOS 5.11 snv_111b i86pc
  sunos% ./size                     
  sizeof(sockaddr)=16
    offsetof(sa_family)=0              sizeof(sa_family)=2
    offsetof(sa_data)=2                sizeof(sa_data)=14
  sizeof(sockaddr_un)=110
    offsetof(sun_family)=0             sizeof(sun_family)=2
    offsetof(sun_path)=2               sizeof(sun_path)=108
  sizeof(sockaddr_in)=16
    offsetof(sin_family)=0             sizeof(sin_family)=2
    offsetof(sin_port)=2               sizeof(sin_port)=2
    offsetof(sin_addr)=4               sizeof(sin_addr)=4
  sizeof(sockaddr_in6)=32
    offsetof(sin6_family)=0            sizeof(sin6_family)=2
    offsetof(sin6_port)=2              sizeof(sin6_port)=2
    offsetof(sin6_flowinfo)=4          sizeof(sin6_flowinfo)=4
    offsetof(sin6_addr)=8              sizeof(sin6_addr)=16
    offsetof(sin6_scope_id)=24         sizeof(sin6_scope_id)=4
  sizeof(sockaddr_storage)=256
    offsetof(ss_family)=0              sizeof(ss_family)=2
  sunos% ./unix-connection foo ./foo
  bind(server)          <- "foo" (3 bytes)
  getsockname(server)   -> "foo\0" (4 bytes)    # Solaris complements a NUL.
  getsockname(client)   -> too short sockaddr_un (0 bytes)      # empty sockaddr_un (no sun_family) returned by getsockname for anonymous Unix domain socket.
  connect               <- "./foo" (5 bytes)
  getpeername(client)   -> "./foo\0" (6 bytes)  # getpeername returns the name given for connect().
  accept                -> "\0\0\0\0\0\0\0\0\0\0\0\0\0\0" (14 bytes)    # 14 NULs returned by accept (and getpeername) for anonymous Unix domain socket.
  getsockname(accepted) -> "foo\0" (4 bytes)
  getpeername(accepted) -> "\0\0\0\0\0\0\0\0\0\0\0\0\0\0" (14 bytes)
  sunos% ./bind-getsockname 01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456 
  bind        <- "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456" (107 bytes)
  getsockname -> "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456\0" (108 bytes)
  sunos% ./bind-getsockname 012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
  bind        <- "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567" (108 bytes)
  getsockname -> "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567"... (109 bytes)
  sunos% ./bind-getsockname 0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678
  bind        <- "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678" (109 bytes)
  getsockname -> "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567"... (110 bytes)
  sunos% ./bind-getsockname 012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234
  bind        <- "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234" (255 bytes)
  getsockname -> "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567"... (256 bytes)
  sunos% ./bind-getsockname 0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345
  bind        <- "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345" (256 bytes)
  bind: File name too long
  sunos% ./bind-getsocknamea
  binda" (501 bytes)
  getsockname -> "././././././././././././././././././././././././././././././././././././././././././././././././././././././"... (502 bytes)
  sunos% ./bind-getsockname /etc/hosts
  bind        <- "/etc/hosts" (10 bytes)
  bind: Address already in use (EADDRINUSE)
  sunos% ./bind-getsockname /etc
  bind        <- "/etc" (4 bytes)
  bind: Address already in use (EADDRINUSE)
  sunos% ./bind-getsockname /
  bind        <- "/" (1 bytes)
  bind: Invalid argument (EINVAL)       # EINVAL for the root directory.
  sunos% ./bind-getsockname /foo
  bind        <- "/foo" (4 bytes)
  bind: Permission denied (EACCES)
  sunos% ./bind-getsockname ''
  bind        <- "" (0 bytes)
  bind: Is a directory (EISDIR)         # EISDIR for empty path.

Cygwin :

  cygwin% uname -mrsv
  CYGWIN_NT-5.1 1.7.17(0.262/5/3) 2012-10-19 14:39 i686
  cygwin% ./bind-getsockname.exe 'foo'  
  bind        <- "foo" (3 bytes)
  getsockname -> "foo\xD5#a\x10\0" (8 bytes)    # Cygwin doesn't see addrlen?

== License

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

(1) Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
(2) Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
(3) The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
OF SUCH DAMAGE.

(The modified BSD licence)

